@model Finance.Models.PaymentStatement
@using Finance.Models

<link href="~/CSS/Checkbox.css" rel="stylesheet" />


@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="~/Scripts/selectFile.js"></script>
<script src="~/Scripts/jquery.inputmask.bundle.js"></script>

<div id="MenuBar">
    @Html.Partial("MenuBar", "PaymentStatements")
</div>

@if (!User.IsInRole("Developer"))
{
    <script>
        $("#MenuBar").hide();
    </script>
}

@if (ViewBag.ErrorUploadDocumentUrlIsNull == 0)
{
    <script>
        alert("Файл не приложен. Нажмите кнопку \"Выберите файл\" .");
    </script>
}

<br />

<div style="padding-bottom:15px;">
    <div style="float:left; display:inline;">
        <h3>Новый платеж</h3>
    </div>
    <div style="float:right; display:inline;">
        <h5>Вы вошли под логином: @User.Identity.Name</h5>
    </div>
</div>

<br />

@using (Html.BeginForm("Create", "PaymentStatements", FormMethod.Post, new { enctype = "multipart/form-data", id = "CreatePaymentStatementForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal" style="padding-top: 5px;">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Counterparty.name, "Компания", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 paymentStatementinput middle" style="margin-top: 15px;">
                @Html.HiddenFor(model => model.KltId)
                @Html.EditorFor(model => model.Counterparty.name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.KltId, "", new { @class = "text-danger" })
            </div>
            @*<div class="col-lg-1 col-md-1 col-sm-1 col-xs-2 padding-left_0">
                    <img src="~/pictures/magnifier_icon-icons.com_67993.png" width="20" height="20" />
                </div>*@
            <div class="col-lg-1 col-md-1 col-sm-1 col-xs-2 padding-left_0 middle" style="margin-top: 15px;">
                <a href="#" style="text-decoration: none" onclick='showModalWindow("/Counterparties/Create")'>
                    <img lenght="80" width="62" src="~/pictures/addNewItem.png" title="Добавить компанию" alt="Добавить компанию">
                </a>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.InvoiceNumber, "№ счета", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 paymentStatementinput">
                @Html.EditorFor(model => model.InvoiceNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.InvoiceNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.InvoiceDate, "Дата счета", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 paymentStatementinput">
                @Html.EditorFor(model => model.InvoiceDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.InvoiceDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.InvoiceSumma, "Сумма счета", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 paymentStatementinput">
                @Html.EditorFor(model => model.InvoiceSumma, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.InvoiceSumma, "", new { @class = "text-danger" })
            </div>
        </div>
        @*<script>

                $("#InvoiceSumma").inputmask({
                    'alias': 'decimal',
                    radixPoint: ",",
                    digits: 2,

                    rightAlign: false
                });
            </script>*@
        <div id="PaymentsContainer">
            <div id="MainLoader" style="width: 100%; height: 100%" hidden>
                <img style="display:block; margin: auto; width: 80px; height: 80px;" src="~/pictures/Coolors-1s-200px.gif" />
            </div>
            @Html.Partial("_PartialPartOfPayment", new Payment())
        </div>
        <div class="form-group" id="belowPartialPaymentsBlock">
            <div id="AddPay" class="col-md-12 form-group" style="padding-left: 18%">
                <input value="Добавить платеж" type="button" onclick="AddPay()" />
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.CurrencyId, "Валюта", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 paymentStatementinput">
                @Html.DropDownListFor(model => model.CurrencyId, ViewBag.CurrenciesList as SelectList, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CurrencyId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Comment, "Коммент.", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 paymentStatementinput">
                @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.InvoiceChecked, "Проверен", htmlAttributes: new { @class = "label-padding col-md-2" })
            <div class="col-md-10 paymentStatementinput">
                <div class="checkbox">
                    @if (User.IsInRole("Sign1") || User.IsInRole("Developer"))
                    {
                        <label class="container-checkbox">
                            @Html.EditorFor(model => model.InvoiceChecked)
                            <span class="checkmark"></span>
                        </label>
                    }
                    else
                    {
                        <label class="container-checkbox">
                            @Html.CheckBoxFor(model => model.InvoiceChecked, new { @onclick = "return false;" })
                            <span class="checkmark"></span>
                        </label>
                    }
                    @Html.ValidationMessageFor(model => model.InvoiceChecked, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PaymentApproved, "В оплату", htmlAttributes: new { @class = "label-padding col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @if (User.IsInRole("Sign1") || User.IsInRole("Developer"))
                    {
                        <label class="container-checkbox">
                            @Html.EditorFor(model => model.PaymentApproved)
                            <span class="checkmark"></span>
                        </label>
                    }
                    else
                    {
                        <label class="container-checkbox">
                            @Html.CheckBoxFor(model => model.PaymentApproved, new { @onclick = "return false;" })
                            <span class="checkmark"></span>
                        </label>
                    }
                    @Html.ValidationMessageFor(model => model.PaymentApproved, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.DocumentUrl, "Загрузить счет", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <input type="file" style="display:none" id="DocumentUrl" name="UploadDocumentUrl" onchange="alert($('#DocumentUrl').val());" >
                    <input class="btn btn-default" type="button" onClick="getFile.simulate()" value="Выбрать файл">
                    <label id="selected">
                        Выберите файл
                    </label>
                    @Html.ValidationMessageFor(model => model.DocumentUrl, "", new { @class = "text-danger" })
                </div>
            </div>*@
        <div class="form-group">
            <div class="col-md-10">
                <input type="file" style="display:none" id="DocumentUrl">
                <input class="btn btn-default" type="button" onClick="getFile.simulate()" value="Выбрать файл">
                @Html.ValidationMessageFor(model => model.DocumentUrl, "", new { @class = "text-danger" })
            </div>
            <div id="files-container" class="col-md-10">
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input id="SaveButton" type="submit" value="Сохранить" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Назад", "Index")
</div>

<script>
    $('#DocumentUrl').on("change", function () {
        var $this = $(this), $clone = $this.clone();
        $clone.attr('name', 'UploadDocumentUrl');
        $clone.attr('id', '');
        $('#files-container').append('<div></div>');
        var divContainer = $('#files-container').children().last();

        $this.after($clone).appendTo(divContainer);


        //var hiddenInput = "<input type='file' style='display: none' name='UploadDocumentUrl' value='" + $(this).val() +"'>";

        if ($(this).val() != "") {
            var fileName = "<p style='float: left'>" + $(this).val() + "</p>";
            var removeLink = '<img style="opacity: 0.5; cursor: pointer; width: 30px; height: 30px; " src="/pictures/symbol-delete-icon.png" alt="Удалить файл" title="Удалить файл">';
            divContainer.append(fileName + removeLink);
        }

    })
</script>

<script>
    function AddPay() {
        //   alert(parseFloat($("input[name='Summa']:last").val().replace(",", ".")).toFixed(2));
        if (parseFloat($("input[name='Summa']:last").val().replace(",", ".")).toFixed(2) == parseFloat(0).toFixed(2)) {
            alert('Невозможно добавить новый платёж, пока предыдущий равен 0');
            return;
        }
        if (RestSumm() < 0) {
            alert('Невозможно добавить новый платёж. Сумма всех платежей превышает сумму счета!');
            return;
        }

        $("#MainLoader").show();
        $.ajax({
            url: '/PaymentStatements/_PartialPartOfPayment/',
            type: "GET", //Типа HTML-запроса
            success: function (data) {
                $("#MainLoader").hide();
                $('#PaymentsContainer').append(data);
                if ($("input[name='Summa']").length == 2) {
                    $("#AddPay").toggleClass("col-md-12 col-md-8");
                    var teg = '<div class="col-md-4" style = "padding-right:24%; padding-left:2%;"><input class="form-control text-box single-line" disabled id="summPercentages" name="summPercentages"/></div>';
                    $('#belowPartialPaymentsBlock').append($(teg));
                }
                $("input[name='Summa']:last").on("change keydown paste input", SumChange);
                $("input[name='Summa']:last").on("change", PartialPaymentsSumm);
                $("input[name='Summa']:last").val(RestSumm().toFixed(2).replace(".", ","));
                SumChange();
            },
            error: function (data) {
                alert('Нет связи с сервером');
                $("#MainLoader").hide();
            }
        })
    }

    function RestSumm() {
        var partialPaymentSumm = 0;
        $("input[name='Summa']").each(function () {
            partialPaymentSumm += parseFloat($(this).val());
        });
        var restSumm = parseFloat($("#InvoiceSumma").val()) - partialPaymentSumm;
        return restSumm;
    }

    function DeletePay(event) {
        $(event.target).parent().parent().remove();
    }

    function SetPaymentDone(event) {
        if ($("input[name='InvoiceChecked']").is(":checked") == false ||
            $("input[name='PaymentApproved']").is(":checked") == false
        )
            event.preventDefault();
        else
            if ($(event.target).is(":checked") == true) {
                $(event.target).closest('.form-group').find('img').hide();
                $("#PaymentDoneStatus").text("Оплачен");
            }
            else {
                $("#PaymentDoneStatus").text("Ожидает оплаты");
                $(event.target).closest('.form-group').find('img').show();
            }
    }
</script>

<script>
    $("#InvoiceSumma").one("mousedown", function () {
        $("#InvoiceSumma").val("");
    })

    $("input[name = 'Summa']:last").one("mousedown", function () {
        $("input[name = 'Summa']:last").val("");
    })

    $("input[name='Summa']:last").on("change", PartialPaymentsSumm);
    $("#InvoiceSumma").on("focusout", PartialPaymentsSumm);

    $("#Summa").on("change keydown paste input", SumChange);
    $("#InvoiceSumma").on("change keydown paste input", SumChange);
    //$("#InvoiceSumma").val('0,00');

    function SumChange() {  // считает %
        var values = [];
        $("input[name='Summa']").each(function () {
            $(this).val($(this).val().replace(".", ","));
            values.push($(this).val());
        });
        //  $("#InvoiceSumma").val($("#InvoiceSumma").val().replace(".", ","));
        var percentsSumm = parseFloat(0.00);
        $("input[name='percentage']").each(function (index) {
            var percent = (values[index].replace(",", ".") * 100 / $("#InvoiceSumma").val().replace(",", ".")).toFixed(2);
            $(this).val(percent + "%");
            percentsSumm += parseFloat(percent);
        });
        $("#summPercentages").val(percentsSumm + "%");
    }

    function PartialPaymentsSumm() {   //Считает общую сумму частичных оплат...
        var partialPaymentSumm = 0;
        $("input[name='Summa']").each(function () {
            partialPaymentSumm += parseFloat($(this).val().replace(",", "."));
        });
        var InvoiceSumma = parseFloat($("#InvoiceSumma").val().replace(",", ".")).toFixed(2);
        if (partialPaymentSumm > InvoiceSumma) {
            alert("Превышение суммы счета на " + (partialPaymentSumm - InvoiceSumma).toFixed(2));
            $("#SaveButton").prop("disabled", true);
        }
        else {
            $("#SaveButton").prop("disabled", false);
        }
    }
</script>

<script type="text/javascript">
    var getFile = new selectFile;
    getFile.targets('DocumentUrl', 'selected');

    $("#CreatePaymentStatementForm").on("submit", function (event) {
        var element = $("#Counterparty_name")[0];

        if ($("#Counterparty_name").val() == '') {
            element.setCustomValidity("Компания не выбрана");
            element.reportValidity();
            event.preventDefault();
        }
        else
            if ($("#KltId").val() == 0) {
                element.setCustomValidity("Данной компании нет в базе данных. Выберите название из выпадающего списка в поле 'Компания'. Либо создайте новую нажав на кнопку 'Добавить новую'");
                element.reportValidity();
                event.preventDefault();
            }
    })

    $(document).ready(function () {
        var element = $("#Counterparty_name")[0];
        var CompanyNameAutocomplete = $("#Counterparty_name").autocomplete({
            source: function (request, response) {
                $('#KltId').val('');
                element.setCustomValidity("");
                $.ajax({
                    url: '/Counterparties/SearchAutocomplete/',
                    type: "POST", //Типа HTML-запроса
                    dataType: "json",
                    data: {
                        request: request.term,
                    },
                    success: function (data) {

                        response($.map(data, function (item) {
                            return { label: item.Name, id: item.Id/*, TypeDb: item.TypeDb*/ };
                        }))
                    },
                    error: function () {
                        //alert("Данной компании нет в базе данных. Выберите название из выпадающего списка в поле 'Компания'. Либо создайте новую нажав на кнопку 'Добавить новую'")
                        alert('Нет связи с базой данных');
                    }
                })
            },
            select: function (event, ui) {
                $('#KltId').val(ui.item.id);
                element.setCustomValidity("");

                //$('#CounterpartyTypeDb').val(ui.item.TypeDb);
            },
            //change: function () {

            //}
        });
    })
</script>
<script>
    $(document).ready(function () {
        $("#InvoiceDate").datepicker({
            dateFormat: 'dd.mm.yy'
        })
    });
</script>
