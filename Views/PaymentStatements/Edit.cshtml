@model Finance.Models.PaymentStatement

<link href="~/CSS/Checkbox.css" rel="stylesheet" />

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="~/Scripts/selectFile.js"></script>

<div id="MenuBar">
    @Html.Partial("MenuBar", "PaymentStatements")
</div>

@if (!User.IsInRole("Developer"))
{
    <script>
        $("#MenuBar").hide();
    </script>
}

<h2>Редактирование</h2>

<div style="float:right;">
    Вы вошли под логином: @User.Identity.Name
</div>

@{
    string LastUrl = "";
    if (Request.UrlReferrer != null)
    {
        LastUrl = Request.UrlReferrer.Segments.LastOrDefault().ToString();
    }
}

<div>
    @Html.ActionLink("Назад", LastUrl)
</div>


@using (Html.BeginForm(Html.BeginForm("Edit", "PaymentStatements", FormMethod.Post, new { enctype = "multipart/form-data", id = "EditPaymentStatementForm" })))
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    @*<h4>PaymentStatement</h4>*@
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)
    @*<div class="form-group">
            @Html.LabelFor(model => model.KltId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.KltId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.KltId, "", new { @class = "text-danger" })
            </div>
        </div>*@
    <div class="form-group">
        @Html.LabelFor(model => model.Counterparty.name, "Компания", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-9">
            <input type="hidden" id="CounterpartyTypeDb" name="CounterpartyTypeDb" />
            @Html.HiddenFor(model => model.KltId)
            @Html.EditorFor(model => model.Counterparty.name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.KltId, "", new { @class = "text-danger" })
        </div>
        @*<div class="col-lg-1 col-md-1 col-sm-1 col-xs-2 padding-left_0">
                <img src="~/pictures/magnifier_icon-icons.com_67993.png" width="20" height="20" />
            </div>*@
        <div class="col-md-1 padding-left_0 ">
            <a href="#" style="text-decoration: none" onclick='showModalWindow("/Counterparties/Create")'>
                <img lenght="40" width="31" src="~/pictures/addItem40x39.png" title="Добавить плательщика" alt="Добавить плательщика">
            </a>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.InvoiceNumber, "№ Счета", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-9">
            @Html.EditorFor(model => model.InvoiceNumber, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.InvoiceNumber, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.InvoiceDate, "Дата счета", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-9">
            @Html.EditorFor(model => model.InvoiceDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.InvoiceDate, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.InvoiceSumma, "Сумма счета", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-9">
            @Html.EditorFor(model => model.InvoiceSumma, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.InvoiceSumma, "", new { @class = "text-danger" })
        </div>
    </div>

    <div id="PaymentsContainer">
        <div id="MainLoader" style="width: 100%; height: 100%" hidden>
            <img style="display:block; margin: auto; width: 80px; height: 80px;" src="~/pictures/Coolors-1s-200px.gif" />
        </div>
        @foreach (var i in Model.Payments)
        {
            Html.RenderPartial("_PartialPartOfPayment", i);
        }
    </div>
    <div class="form-group" id="belowPartialPaymentsBlock">
        <div id="AddPay" class="col-md-12 form-group" style="padding-left: 18%">
            <input value="Добавить платеж" type="button" onclick="AddPay()" />
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.CurrencyId, "Валюта", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-9 paymentStatementinput">
            @Html.DropDownListFor(model => model.CurrencyId, ViewBag.CurrenciesList as SelectList, new { @class = "form-control" })
            @Html.HiddenFor(model => model.CurrencyId, new { value = "model => model.Currency.Id" })
            @Html.ValidationMessageFor(model => model.CurrencyId, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Comment, "Коммент.", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-9">
            @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.InvoiceChecked, "Проверен", htmlAttributes: new { @class = "label-padding col-md-2" })
        <div class="col-md-10 paymentStatementinput">
            <div class="checkbox">
                @if (User.IsInRole("Sign1") || User.IsInRole("Developer"))
                {
                    <label class="container-checkbox">
                        @Html.CheckBoxFor(model => model.InvoiceChecked)
                        <span class="checkmark"></span>
                    </label>
                }
                else
                {
                    <label class="container-checkbox">
                        @Html.CheckBoxFor(model => model.InvoiceChecked, new { @onclick = "return false;" })
                        <span class="checkmark"></span>
                    </label>
                }
                @Html.ValidationMessageFor(model => model.InvoiceChecked, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PaymentApproved, "В оплату", htmlAttributes: new { @class = "label-padding col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @if (User.IsInRole("Sign1") || User.IsInRole("Developer"))
                {
                    <label class="container-checkbox">
                        @Html.CheckBoxFor(model => model.PaymentApproved)
                        <span class="checkmark"></span>
                    </label>
                }
                else
                {
                    <label class="container-checkbox">
                        @Html.CheckBoxFor(model => model.PaymentApproved, new { @onclick = "return false;" })
                        <span class="checkmark"></span>
                    </label>
                }
                @Html.ValidationMessageFor(model => model.PaymentApproved, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @*@Html.LabelFor(model => model.DocumentUrl, "", htmlAttributes: new { @class = "control-label col-md-2" })*@
        <div class="col-md-2"></div>
        <div class="col-md-10" style="padding-left: 5px;">

            @*{
            <img src="/pictures/txt-file-icon-1196.png" alt="Открыть файл" title="Открыть файл" onclick="alert('Файл не был добавлен при создании платежа.')" style="opacity:0.5; cursor: pointer; width:60px; height:60px; margin: 10px;">
            <img src="/pictures/symbol-delete-icon.png" alt="Удалить файл" title="Удалить файл" onclick="alert('Файл не был добавлен при создании платежа.')" style="opacity:0.5; cursor: pointer; width:30px; height:30px;">
            }*@
            @if (Model.PaymentsDocuments.Count != 0)
            {
                foreach (var i in Model.PaymentsDocuments)
                {
                    @Html.Hidden("UploadDocumentId", i.Id);
                    <img onclick="window.open('@Url.Action("FileViewer", new { id = Model.Id })')" src="/pictures/txt-file-icon-1196.png" alt="Открыть файл" title="Открыть файл" style="cursor: pointer; width:60px; height:60px; margin: 10px;">
                    <img onclick="window.open('@Url.Action("DeleteFile", new { id = Model.Id, documentUrl = i.DocumentUrl })')" src="/pictures/symbol-delete-icon.png" alt="Удалить файл" title="Удалить файл" style="cursor: pointer; width:30px; height:30px;">
                }
            }
            <div>
            </div>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-10">
            <input type="file" style="display:none" id="DocumentUrl">
            <input class="btn btn-default" type="button" onClick="getFile.simulate()" value="Выбрать файл">
            @Html.ValidationMessageFor(model => model.DocumentUrl, "", new { @class = "text-danger" })
        </div>
        <div id="files-container" class="col-md-10">
        </div>
    </div>

    <div hidden>
        <input id="LastUrl" name="LastUrl" type="hidden" value="@LastUrl" />
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Сохранить" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div style="float:right">
    @if (Model.whoAddThis!=null)
    { 
         <p>В оплату записано: @Model.whoAddThis.UserName</p>
    }
</div>

<div>
    @Html.ActionLink("Назад", LastUrl, new { onclick = "AreYouSurreToGoBack()" })
</div>
<script>
    function AreYouSurreToGoBack() {
        var answer = prompt("Вы уверенны что хотите выйти не сохраняя изменения?");
        if (answer == false)
            event.preventDefault();
    }
</script>
<script>
    //function AddPay() {
    //    $("#MainLoader").show();
    //    $.ajax({
    //        url: '/PaymentStatements/_PartialPartOfPayment/',
    //        type: "GET", //Типа HTML-запроса
    //        success: function (data) {
    //            $("#MainLoader").hide();
    //            $('#PaymentsContainer').append(data);
    //            $("input[name='Summa']:last").on("change keydown paste input", SumChange);
    //            $("input[name='Summa']:last").val(0.00);
    //        },
    //        error: function (data) {
    //            alert('Нет связи с сервером');
    //        }
    //    })
    //}

    function AddPay() {
        //   alert(parseFloat($("input[name='Summa']:last").val().replace(",", ".")).toFixed(2));


        if ($("input[name='Summa']:last").val() != null && parseFloat($("input[name='Summa']:last").val().replace(",", ".")).toFixed(2) == parseFloat(0).toFixed(2)) {
            alert('Невозможно добавить новый платёж, пока предыдущий равен 0');
            return;
        }
        if (RestSumm() < 0) {
            alert('Невозможно добавить новый платёж. Сумма всех платежей превышает сумму счета!');
            return;
        }

        $("#MainLoader").show();
        $.ajax({
            url: '/PaymentStatements/_PartialPartOfPayment/',
            type: "GET", //Типа HTML-запроса
            success: function (data) {
                $("#MainLoader").hide();
                $('#PaymentsContainer').append(data);
                if ($("input[name='Summa']").length == 2) {
                    $("#AddPay").toggleClass("col-md-12 col-md-8");
                    var teg = '<div class="col-md-4" style = "padding-right:24%; padding-left:2%;"><input class="form-control text-box single-line" disabled id="summPercentages" name="summPercentages"/></div>';
                    $('#belowPartialPaymentsBlock').append($(teg));
                }
                $("input[name='Summa']:last").on("change keydown paste input", SumChange);
                $("input[name='Summa']:last").on("change", PartialPaymentsSumm);
                $("input[name='Summa']:last").val(RestSumm().toFixed(2).replace(".", ","));
                SumChange();
            },
            error: function (data) {
                alert('Нет связи с сервером');
                $("#MainLoader").hide();
            }
        })
    }

    function RestSumm() {
        var partialPaymentSumm = 0;
        $("input[name='Summa']").each(function () {
            partialPaymentSumm += parseFloat($(this).val());
        });
        var restSumm = parseFloat($("#InvoiceSumma").val()) - partialPaymentSumm;
        return restSumm;
    }

    function DeletePay(event) {
        $(event.target).parent().parent().remove();
    }

    function SetPaymentDone(event) {
        if ($("input[name='InvoiceChecked']").is(":checked") == false ||
            $("input[name='PaymentApproved']").is(":checked") == false
        )
            event.preventDefault();
        else
            if ($(event.target).is(":checked") == true) {
                $(event.target).closest('.form-group').find('img').hide();
                $("#PaymentDoneStatus").text("Оплачен");
            }
            else {
                $("#PaymentDoneStatus").text("Ожидает оплаты");
                $(event.target).closest('.form-group').find('img').show();
            }
    }

    $(window).on("load", SumChange);
    $("#InvoiceSumma").on("change keydown paste input", SumChange);
    function SumChange() {
        var values = [];
        $("input[name='Summa']").each(function () {
            $(this).val($(this).val().replace(".", ","));
            values.push($(this).val());
        });
        $("#InvoiceSumma").val($("#InvoiceSumma").val().replace(".", ","));
        $("input[name='percentage']").each(function (index) {
            $(this).val(values[index].replace(",", ".") * 100 / $("#InvoiceSumma").val().replace(",", ".") + "%");
        });
    }
</script>

<script>
        $("#InvoiceSumma").one("mousedown", function () {
            $("#InvoiceSumma").val("");
        })

        $("input[name = 'Summa']:last").one("mousedown", function () {
            $("input[name = 'Summa']:last").val("");
        })

        $("input[name='Summa']:last").on("change", PartialPaymentsSumm);
        $("#InvoiceSumma").on("focusout", PartialPaymentsSumm);

        $("#Summa").on("change keydown paste input", SumChange);
        $("#InvoiceSumma").on("change keydown paste input", SumChange);
        //$("#InvoiceSumma").val('0,00');

        function SumChange() {  // считает %
            var values = [];
            $("input[name='Summa']").each(function () {
                $(this).val($(this).val().replace(".", ","));
                values.push($(this).val());
            });
            //  $("#InvoiceSumma").val($("#InvoiceSumma").val().replace(".", ","));
            var percentsSumm = parseFloat(0.00);
            $("input[name='percentage']").each(function (index) {
                var percent = (values[index].replace(",", ".") * 100 / $("#InvoiceSumma").val().replace(",", ".")).toFixed(2);
                $(this).val(percent + "%");
                percentsSumm += parseFloat(percent);
            });
            $("#summPercentages").val(percentsSumm + "%");
        }

        function PartialPaymentsSumm() {   //Считает общую сумму частичных оплат...
            var partialPaymentSumm = 0;
            $("input[name='Summa']").each(function () {
                partialPaymentSumm += parseFloat($(this).val().replace(",", "."));
            });
            var InvoiceSumma = parseFloat($("#InvoiceSumma").val().replace(",", ".")).toFixed(2);
            if (partialPaymentSumm > InvoiceSumma) {
                alert("Превышение суммы счета на " + (partialPaymentSumm - InvoiceSumma).toFixed(2));
                $("#SaveButton").prop("disabled", true);
            }
            else {
                $("#SaveButton").prop("disabled", false);
            }


        }

    </script>

<script type="text/javascript">

        var getFile = new selectFile;
        getFile.targets('DocumentUrl', 'selected');

        $("#EditPaymentStatementForm").on("submit", function (event) {
            var element = $("#Counterparty_name")[0];

            if ($("#Counterparty_name").val() == '') {
                element.setCustomValidity("Компания не выбрана");
                element.reportValidity();
                event.preventDefault();
            }
            else
                if ($("#KltId").val() == 0) {
                    element.setCustomValidity("Данной компании нет в базе данных. Выберите название из выпадающего списка в поле 'Компания'. Либо создайте новую нажав на кнопку 'Добавить новую'");
                    element.reportValidity();
                    event.preventDefault();
                }
        })

    $(document).ready(function () {
        var element = $("#Counterparty_name")[0];
        var CompanyNameAutocomplete = $("#Counterparty_name").autocomplete({
            source: function (request, response) {
                $('#KltId').val('');
                element.setCustomValidity("");
                $.ajax({
                    url: '/Counterparties/SearchAutocomplete/',
                    type: "POST", //Типа HTML-запроса
                    dataType: "json",
                    data: {
                        request: request.term,
                    },
                    success: function (data) {

                        response($.map(data, function (item) {
                            return { label: item.Name, id: item.Id/*, TypeDb: item.TypeDb*/ };
                        }))
                    },
                    error: function () {
                        //alert("Данной компании нет в базе данных. Выберите название из выпадающего списка в поле 'Компания'. Либо создайте новую нажав на кнопку 'Добавить новую'")
                        alert('Нет связи с базой данных');
                    }
                })
            },
            select: function (event, ui) {
                $('#KltId').val(ui.item.id);
                element.setCustomValidity("");

                //$('#CounterpartyTypeDb').val(ui.item.TypeDb);
            },
            //change: function () {

            //}
        });
    })
</script>

<script>
    $('#DocumentUrl').on("change", function () {
        
        var $this = $(this), $clone = $this.clone();
        $clone.attr('name', 'UploadDocumentUrl');
        $clone.attr('id', '');
       
        $('#files-container').append('<div></div>');
        var divContainer = $('#files-container').children().last();

        //$this.after($clone).appendTo(divContainer);
        $this.after($clone);
        $clone.appendTo(divContainer);

        //$('#files-container div:last-child input').attr('name', 'UploadDocumentUrl');
        //$('#files-container div:last-child input').attr('id', '');

        //var hiddenInput = "<input type='file' style='display: none' name='UploadDocumentUrl' value='" + $(this).val() +"'>";

        if ($(this).val() != "") {
            var fileName = "<p style='float: left'>" + $(this).val() + "</p>";
            var removeLink = '<img onclick="$(this).parent().remove();" style="opacity: 0.5; cursor: pointer; width: 30px; height: 30px; " src="/pictures/symbol-delete-icon.png" alt="Удалить файл" title="Удалить файл">';
            divContainer.append(fileName + removeLink);
        }

    })
</script>

<script>
    @*var userIsInRoleSign1 = '@(User.IsInRole("Sign1") || User.IsInRole("Developer") ? "true" : "false")';*@

    $("input[name='InvoiceChecked']").on("change", function (e) {

        var NextCheckboxStatus = $('input[name="PaymentApproved"]').is(":checked");
        var status = $(e.target).is(":checked");

        if (/*userIsInRoleSign1 == "true" &&*/ NextCheckboxStatus != true) {                
                $.ajax({
                    url: "/PaymentStatements/SetInvoiceChecked?id=" + @Model.Id + "&status=" + status,
                    type: "GET",
                    success: function (data) {
                        //alert(data);
                    },
                    error: function (data) {
                        alert("Create.SetInvoiceChecked:" + data);
                        $("input[name='InvoiceChecked']").prop("checked", !status);
                    }
                })
            }
            else {
                $(e.target).prop("checked", !status);
                alert("Изменение статуса запрещено. Для изменения статуса данного этапа, снимите с проводки следующий этап. ")
            }
    })

    $("input[name='PaymentApproved']").on("change", function (e) {

        var InvoiceCheckedStatus = $('input[name="InvoiceChecked"]').is(":checked");
        var PaymentApprovedStatus = $('input[name="PaymentApproved"]').is(":checked");
        var PaymentDoneStatus = $('input[name="PaymentPaymentDone"]').is(":checked");

        if (/*userIsInRoleSign1 == "true" && */PaymentDoneStatus != true && InvoiceCheckedStatus == true) {
            $.ajax({
                url: "/PaymentStatements/SetPaymentApproved?id=" + @Model.Id + "&status=" + PaymentApprovedStatus,
                type: "GET",
                success: function (data) {
                    //alert(data);
                },
                error: function (data) {
                    alert(data);
                    $(e.target).prop("checked", !PaymentApprovedStatus);
                }
            })
        }
        else {
            $(e.target).prop("checked", !PaymentApprovedStatus);
            alert("Изменение статуса запрещено.")
        }
    })

    @*var userIsInRoleAccountant = '@(User.IsInRole("Sign1") || User.IsInRole("Developer") || User.IsInRole("Accountant") ? "true" : "false")';*@

    $("input[name='PaymentPaymentDone']").on("change", function (e) {
        //var stringId = $('div[name="paymentId"]')[0].id;   // если хотя бы один чекбокс PaymentPaymentDone = true, отмена PaymentApproved запрещена
        //var id = parseInt(stringId)
        var status = $(e.target).is(":checked");

        var id = $(e.target).parents()[5].childNodes[1].id;

        //var PaymentDoneCurrentStatus = $('input[name="PaymentPaymentDone"]').is(":checked");
        var PaymentApprovedCheckboxStatus = $('input[name="PaymentApproved"]').is(":checked");

        if (/*userIsInRoleAccountant == "true" && */PaymentApprovedCheckboxStatus != false) {
            $.ajax({
                url: "/PaymentStatements/SetPaymentDone?id=" + id + "&status=" + status,
                type: "GET",
                success: function (data) {
                    //alert(data);
                },
                error: function (data) {
                    alert("Create.SetPaymentDone: " + data);
                    $(e.target).prop("checked", !status);
                }
            })
        }
        else {
            $(e.target).prop("checked", !status);
            alert("Изменение статуса запрещено.")
        }
    })

</script>



<script>
    $(function () {
        $("#InvoiceDate").datepicker(
            {
                dateFormat: "dd-mm-yy"
            });

    });
</script>